import android.app.AlertDialog;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.Vibrator;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;

public class LoginActivity extends AppCompatActivity {
private byte[] gas = new byte[16];
private boolean[] flag = new boolean[16];
private String[] gas_s = new String[16];
private TextView[] tv = new TextView[16];
private TextView current;
private Button details;
private String current_s;
private MediaPlayer mediaPlayer;
private Vibrator vibe;
private AlertDialog.Builder oDialog;
boolean stopflag = false;
boolean resetflag = false;

static DatagramSocket dsock;
static DatagramPacket sPack, rPack;
static final int port = 5000;
static InetAddress server;

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_login);

vibe = (Vibrator) getSystemService(VIBRATOR_SERVICE);
//mediaPlayer = MediaPlayer.create(this, R.raw.merge_siren_10);
initialize();

try {
server = InetAddress.getByName("192.168.1.21");
} catch (Exception k) {
}

new Thread() {
public void run() {
connect();
}
}.start();
}

public void bOnClick(View v) {
Message msg;
switch (v.getId()) {
case R.id.details:
oDialog = new AlertDialog.Builder(this);
oDialog.setTitle("현재 누출 위치").setMessage(current_s + " 번 센터 가스 누출 중");
oDialog.setPositiveButton("확인", null);
AlertDialog alertDialog = oDialog.create();
alertDialog.show();
break;
case R.id.stop:
stopflag = true;
msg = Message.obtain(mHandler, 0);
mHandler.sendMessage(msg);
for (int i = 0; i < 16; i++)
flag[i] = false;
current_s = null;
vibe.cancel();
//mediaPlayer.stop();
//mediaPlayer.release();
break;
case R.id.reset:
resetflag = true;
msg = Message.obtain(mHandler, 1);
mHandler.sendMessage(msg);
for (int i = 0; i < 16; i++)
flag[i] = false;
current_s = null;
vibe.cancel();
//mediaPlayer.stop();
//mediaPlayer.release();
break;
}
}

public void initialize() {
tv[0] = findViewById(R.id.gas_0101);
tv[1] = findViewById(R.id.gas_0102);
tv[2] = findViewById(R.id.gas_0103);
tv[3] = findViewById(R.id.gas_0104);
tv[4] = findViewById(R.id.gas_0105);
tv[5] = findViewById(R.id.gas_0106);
tv[6] = findViewById(R.id.gas_0107);
tv[7] = findViewById(R.id.gas_0108);
tv[8] = findViewById(R.id.gas_0109);
tv[9] = findViewById(R.id.gas_0110);
tv[10] = findViewById(R.id.gas_0111);
tv[11] = findViewById(R.id.gas_0112);
tv[12] = findViewById(R.id.gas_0113);
tv[13] = findViewById(R.id.gas_0114);
tv[14] = findViewById(R.id.gas_0115);
tv[15] = findViewById(R.id.gas_0116);
details = findViewById(R.id.details);
current = findViewById(R.id.current);
current.setText("총 16개소 정상 작동 중");
}

public void connect() {
Client client = new Client();
try {
client.communicate();
} catch (Exception e) {
e.printStackTrace();
}
}

Handler mHandler = new Handler() {
public void handleMessage(Message msg) {
switch (msg.what) {
case 0:
System.out.println("일시정지");
try {
Toast.makeText(getApplicationContext(), "일시정지 되었습니다.", Toast.LENGTH_SHORT).show();
} catch (Exception e) { }
break;
case 1:
System.out.println("리셋");
try {
Toast.makeText(getApplicationContext(), "리셋되었습니다.", Toast.LENGTH_SHORT).show();
} catch (Exception e) { }
break;
case 2:
System.out.println("1");
for (int i = 0; i < 16; i++) {
gas_s[i] = Integer.toString(gas[i]);
if (gas[i] > 20) {
flag[i] = true;
current_s = (i + 1) + "/";
}
tv[i].setText(gas_s[i]);
}

for (int i = 0; i < 16; i++) { // flag 값이 true 인 항목이 하나라도 있는지 확인하는 작업
if (flag[i] == true) {
current.setText("현재 " + current_s + "개소 누출 중");
details.setVisibility(View.VISIBLE);
vibe.vibrate(3000);
//mediaPlayer.start();
System.out.println("3");
break;
} else {
current.setText("총 16개소 정상 작동 중");
System.out.println("4");
}
}
break;
}
}
};

class Client {
public Client() {
try {
dsock = new DatagramSocket();
} catch (Exception e) {
System.out.println(e);
}
}

public void communicate() throws Exception {
try {
// IP주소와 포트번호를 입력하여 Socket 통신을 시작합니다.
Socket sock = new Socket("192.168.1.21", 5000);
System.out.println(sock.isConnected());
// Socket으로부터 outputStream을 얻습니다.
InputStream is = sock.getInputStream();
// 등록한 InputStream을 ObjectInputStream방식으로 사용합니다.
final ObjectInputStream ois = new ObjectInputStream(is);

// 전송된 byte[] 데이터를 수신합니다.
while (true) {
byte[] data = (byte[]) ois.readObject();

System.out.println("data size : " + data.length);
for (int i = 0; i < data.length; i++) {
System.out.print(data[i] + " ");
gas[i]=data[i];
}
System.out.println();
}
} catch (UnknownHostException e) {
e.printStackTrace();
} catch (IOException e) {
e.printStackTrace();
}
}
}
}
